# -*- coding: utf-8 -*-
import json
import re

with open('onlyaspell.txt') as f: 
    diction = f.read().split(',')

with open('engrem.txt') as f: 
    engrem = f.read().split(',')

def getVariations(word):
    omit = {}
    double = {}
    swap = {}
    swap2 = {}
    replace = {}
    #duplicating a letter
    for x in range(len(word)):
        double[(word[0 : x : ] + word[x] + word[x : :])] = x
    #omiting a letter
    for x in range(len(word)):
        omit[(word[0 : x : ] + word[x + 1 : :])] = x
    #swapping a letter
    for x in range(len(word)-1):
        swap[(word[0 : x : ] + word[x + 1] + word[x] + word[x + 2 : :])] = x
    #swapping a 2nd letter
    for x in range(len(word)-2):
        swap2[(word[0 : x : ] + word[x + 2]  + word[x + 1] + word[x] + word[x + 3 : :])] = x
    #replacing by another letter
    for letter in 'aeiou':
        for x in range(len(word)):
            if word[x] in 'aeiou':
                replace[(word[0 : x : ] + letter + word[x + 1 : :])] = x
    variations = {
        'double': double,
        'omit': omit,
        'swap': swap,
        'swap2': swap2,
        'replace': replace
    }
    return variations

def decodeLine(line):
    line = line.replace('&quot;','"')
    line = line.replace('&lt;','<')
    line = line.replace('&gt;','>')
    line = line.replace('&amp;','&')
    line = line.replace('&nbsp;',' ')
    return line

class isScanFlags:
    def __init__(self):
        self.mainflag = 1
        self.textflag = 1
    def newArticleReset(self):
        self.templateflag = 0
        self.externalflag = 0
        self.refflag = 0
        self.fileflag = 0
        self.quoteflag = 0
        self.quote2flag = 0
        self.quote3flag = 0
        self.commentflag = 0
        self.divflag = 0
        self.codeflag = 0
        self.poemflag = 0
        self.galleryflag = 0
        self.Galleryflag = 0
        self.sourceflag = 0
    
mainstr = '<ns>0</ns>'
endpage = '</page>'
typos = []
checkedWords = []
title = ''
f = open('demofile2.txt', 'w')
#from bz2 import BZ2File
#with BZ2File('/public/dumps/public/enwiki/latest/enwiki-latest-pages-articles.xml.bz2','r') as file:
#option to run on local env
with open('enwiki-20220301-pages-articles16.xml') as file:
    flags = isScanFlags()
    for line in file:
        line = decodeLine(line)
        if '<title>' in line:
            title = line
            flags.newArticleReset()
        if '<text' in line:
            flags.textflag = 0
        if flags.textflag:
            continue
        if mainstr in line:
            flags.mainflag = 0
            flags.textflag = 1
        if endpage in line:
            flags.mainflag = 1
        if flags.mainflag:
            continue
        if line[0][0] == ':':
            continue
        previous = next_ = ''
        line = line.rstrip('\n')+' '
        objects = re.split(r"([\-{}\[,.\";\^~#\=&\)\|<>\?]*\s+[\-{},.\";\^~#\=&\)\|>\?]*)", line)
        l = len(objects)-2
        for index, word in enumerate(objects):
            if word == ' ':
                continue
            if '}}' in word and flags.templateflag > 0:
                flags.templateflag -= 1
            if '{{' in word:
                flags.templateflag += 1
            if '[File' in word:
                flags.fileflag = 1
            if '[file' in word:
                flags.fileflag = 1
            if '[Image' in word:
                flags.fileflag = 1
            if '[image' in word:
                flags.fileflag = 1
            if ']' in word:
                flags.externalflag = 0
            if '[h' in word:
                flags.externalflag = 1
            if '<!--' in word:
                flags.commentflag = 1
            if '-->' in word: 
                flags.commentflag = 0
            if '<ref' in word:
                flags.refflag = 1
            if '/ref' in word:
                flags.refflag = 0
            if '<div' in word:
                flags.divflag = 1
            if '/div' in word:
                flags.divflag = 0
            if '<code' in word:
                flags.codeflag = 1
            if '/code' in word:
                flags.codeflag = 0    
            if '<poem' in word:
                flags.poemflag = 1
            if '/poem' in word:
                flags.poemflag = 0
            if '<gallery' in word:
                flags.galleryflag = 1
            if '/gallery' in word:
                flags.galleryflag = 0
            if '<Gallery' in word:
                flags.Galleryflag = 1
            if '/Gallery' in word:
                flags.Galleryflag = 0    
            if '<source' in word:
                flags.sourceflag = 1
            if '/source' in word:
                flags.sourceflag = 0    
            if (word.count('"') % 2) and not flags.quoteflag:
                flags.quoteflag = 1
                continue
            if (word.count('"') % 2) and flags.quoteflag:
                flags.quoteflag = 0
            if '\'\'' in word and not flags.quote2flag:
                flags.quote2flag = 1
                continue
            if '\'\'' in word and flags.quote2flag:
                flags.quote2flag = 0
            if '<block' in word:
                flags.quote3flag = 1
            if '</block' in word:
                flags.quote3flag = 0
            if flags.templateflag or flags.sourceflag or flags.Galleryflag or flags.galleryflag or flags.poemflag or flags.codeflag or flags.divflag or flags.quoteflag or flags.quote2flag or flags.quote3flag or flags.commentflag or flags.externalflag or flags.fileflag or flags.refflag:
                continue
            if not word.isalpha():
                continue
            if len(word) < 5:
                continue
            if not word.islower():
                continue
            if word in diction:
                continue
            #if the word without last s in dictionary
            if word[0:len(word)-1:] and word[len(word)-1]=='s' and word[len(word)-2]!='s':
                continue
            if word in engrem:
                continue
            if word in checkedWords:
                continue
            checkedWords.append(word)
            wordVariations = getVariations(word)
            for variationType in wordVariations:
                if word in typos:
                    break
                for variant in wordVariations[variationType]:
                    if variant in diction:
                        spot = wordVariations[variationType][variant]
                        typos.append(word)
                        before = ''
                        after = ''
                        f.write('\n'+title.replace('    <title>','== [[').replace('</title>',']] =='))
                        if(spot == len(variant)):
                            f.write(word+'-><!--'+ variant + '-->'+ variant[0 : spot-1 : ] + "'''" + variant[spot-1] + "'''")
                        else:
                            f.write(word+'-><!--'+ variant + '-->'+(variant[0 : spot : ] + "'''" + variant[spot] + "'''" + variant[spot+1:]))
                        f.write('? (' + variationType + ') context: \n<nowiki>~~~ ')
                        for x in range(-12,1):
                            if index+x >= 0 and index+x < l:
                                before += objects[index+x]
                        f.write(before+' </nowiki><br>\n\'\'\''+word+'\'\'\' <nowiki>')
                        for x in range(1,12):
                            if index+x >= 0 and index+x < l:
                                after += objects[index+x]
                        f.write(after+' ~~~</nowiki>')
                        f.flush()
                        break
f.close()
