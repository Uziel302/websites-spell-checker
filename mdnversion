# -*- coding: utf-8 -*-
import os
import json
import re

def decodeLine(line):
    line = line.replace('&quot;','"')
    line = line.replace('&lt;','<')
    line = line.replace('&gt;','>')
    line = line.replace('&amp;','&')
    line = line.replace('&nbsp;',' ')
    line = line.replace('&mdash;','â€”')
    return line

with open('fixes2.txt') as f: 
	data = f.read()	   
diction = json.loads(data) 

class isScanFlags:
    def __init__(self):
        self.mainflag = 1
        self.textflag = 1
    def newArticleReset(self):
        self.templateflag = 0
        self.externalflag = 0
        self.refflag = 0
        self.fileflag = 0
        self.quoteflag = 0
        self.quote2flag = 0
        self.quote3flag = 0
        self.commentflag = 0
        self.divflag = 0
        self.codeflag = 0
        self.poemflag = 0
        self.galleryflag = 0
        self.Galleryflag = 0
        self.sourceflag = 0
    
mainstr = '<ns>0</ns>'
endpage = '</page>'
mainflag = 1
textflag = 1
typos = []
checkedWords = []
title = ''
f = open('demofile2.txt', 'w')
flags = isScanFlags()
rootdir = '/Users/mbpmbp/Documents/GitHub/content'
for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        if file == '_wikihistory.json':
            continue
        #flags.newArticleReset()
        with open(os.path.join(subdir, file)) as textfile:
            if '.md' not in textfile.name:
                continue
            for line in textfile:
                line = decodeLine(line)
                fileflag = 0
                quote2flag = 0
                quoteflag = 0
                previous = next_ = ''
                line = line.rstrip('\n')+' '
                objects = re.split(r"([\-{}\[,.\";\^~#\=&\)\|<>\?]*\s+[\-{},.\";\^~#\=&\)\|>\?]*)", line)
                l = len(objects)-2
                for index, word in enumerate(objects):
                    if word == ' ':
                        continue
                    if not word.isalpha():
                        continue
                    if len(word) < 5:
                        continue
                    if not word.islower():
                        continue
                    if word in checkedWords:
                        continue
                    checkedWords.append(word)
                    if word in typos:
                        break
                    
                    if word in diction:
                        f.write('\n'+title.replace('    <title>','== [[').replace('</title>',']] =='))
                        f.write(word+'-><!--')
                        print (word)
                        fix = diction[word].split(",")[0]
                        f.write(fix+'-->'+textfile.name)
                    f.flush()
                    break
f.close()
